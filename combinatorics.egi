def stirling2 n k :=
  sum
    (map
       (\r -> power (-1) (k - r) * power r n / fact r * fact (k - r))
       (between 1 k))

def bell n := sum (map (\k -> stirling2 n k) (between 0 n))

def catalan n := comb (2 * n) n / (n + 1)

def lucas n :=
  match n as integer with
    | #1 -> 1
    | #2 -> 3
    | $n -> lucas (n - 1) + lucas (n - 2)

def derangements :=
  let g := let step x y :=
                 let n := snd x
                     i := fst y
                     m := snd y
                  in (i + 1, i * (n + m))
            in (0, 1) :: (1, 0) :: map2 step g (tail g)
   in map snd g

take 9 derangements

map bell (between 1 9)

map catalan (between 1 10)

map lucas (between 1 10)
